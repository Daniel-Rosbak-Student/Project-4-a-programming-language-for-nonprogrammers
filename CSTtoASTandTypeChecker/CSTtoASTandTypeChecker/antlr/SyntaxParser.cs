//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Daniel/IdeaProjects/LanguageSyntax/src/Syntax.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SyntaxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114;
	public const int
		RULE_program = 0, RULE_commands = 1, RULE_command = 2, RULE_terms = 3, 
		RULE_term = 4, RULE_value = 5, RULE_lengthOf = 6, RULE_type = 7, RULE_identifier = 8, 
		RULE_listElement = 9, RULE_addToList = 10, RULE_nonKeywordName = 11, RULE_number = 12, 
		RULE_nonZeroNumber = 13, RULE_digit = 14, RULE_nonZeroDigit = 15, RULE_flag = 16, 
		RULE_text = 17, RULE_textWithoutNewlineOrQuotationmarks = 18, RULE_controlStructures = 19, 
		RULE_loop = 20, RULE_if_else = 21, RULE_function = 22, RULE_takesArgument = 23, 
		RULE_parameter = 24, RULE_givesArgument = 25, RULE_nothing = 26, RULE_statement = 27, 
		RULE_assignment = 28, RULE_create = 29, RULE_give = 30, RULE_break = 31, 
		RULE_use = 32, RULE_useInput = 33, RULE_print = 34, RULE_read = 35, RULE_expression = 36, 
		RULE_operator = 37, RULE_character = 38, RULE_symbol = 39, RULE_symbolWithoutNewline = 40, 
		RULE_wsc = 41, RULE_comment = 42, RULE_a = 43, RULE_b = 44, RULE_c = 45, 
		RULE_d = 46, RULE_e = 47, RULE_f = 48, RULE_g = 49, RULE_h = 50, RULE_i = 51, 
		RULE_j = 52, RULE_k = 53, RULE_l = 54, RULE_m = 55, RULE_n = 56, RULE_o = 57, 
		RULE_p = 58, RULE_q = 59, RULE_r = 60, RULE_s = 61, RULE_t = 62, RULE_u = 63, 
		RULE_v = 64, RULE_w = 65, RULE_x = 66, RULE_y = 67, RULE_z = 68;
	public static readonly string[] ruleNames = {
		"program", "commands", "command", "terms", "term", "value", "lengthOf", 
		"type", "identifier", "listElement", "addToList", "nonKeywordName", "number", 
		"nonZeroNumber", "digit", "nonZeroDigit", "flag", "text", "textWithoutNewlineOrQuotationmarks", 
		"controlStructures", "loop", "if_else", "function", "takesArgument", "parameter", 
		"givesArgument", "nothing", "statement", "assignment", "create", "give", 
		"break", "use", "useInput", "print", "read", "expression", "operator", 
		"character", "symbol", "symbolWithoutNewline", "wsc", "comment", "a", 
		"b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", 
		"p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"
	};

	private static readonly string[] _LiteralNames = {
		null, "'program'", "'('", "')'", "'-'", "'0'", "'1'", "'2'", "'3'", "'4'", 
		"'5'", "'6'", "'7'", "'8'", "'9'", "'\"'", "','", "';'", "'='", "'+'", 
		"'*'", "'/'", "'>'", "'<'", "'<='", "'>='", "'A'", "'B'", "'C'", "'D'", 
		"'E'", "'F'", "'G'", "'H'", "'I'", "'J'", "'K'", "'L'", "'M'", "'N'", 
		"'O'", "'P'", "'Q'", "'R'", "'S'", "'T'", "'U'", "'V'", "'W'", "'X'", 
		"'Y'", "'Z'", "'a'", "'b'", "'c'", "'d'", "'e'", "'f'", "'g'", "'h'", 
		"'i'", "'j'", "'k'", "'l'", "'m'", "'n'", "'o'", "'p'", "'q'", "'r'", 
		"'s'", "'t'", "'u'", "'v'", "'w'", "'x'", "'y'", "'z'", "'\\newline'", 
		"'\\n'", "'['", "']'", "'{'", "'}'", "'''", "'\\\"'", "'|'", "'.'", "'?'", 
		"'\\enter'", "'\\tab'", "'\\t'", "'\\r'", "'\\carriageReturn'", "'\\f'", 
		"'\\formfeed'", "'\\backspace'", "'\\b'", "'@'", "'!'", "'&'", "':'", 
		"'#'", "'$'", "'\\u00C2\\u00A4'", "'%'", "'\\u00C2\\u00B4'", "'`'", "'~'", 
		"'^'", "'\\u00C2\\u00A8'", "'_'", "'\\u00C2\\u00BD'", "'\\u00C2\\u00A7'", 
		"' '"
	};
	private static readonly string[] _SymbolicNames = {
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Syntax.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SyntaxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SyntaxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SyntaxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public CommandsContext cmds;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SyntaxParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(T__0);
			State = 139;
			wsc();
			State = 140;
			Match(T__1);
			State = 141;
			wsc();
			State = 142;
			_localctx.cmds = commands();
			State = 143;
			wsc();
			State = 144;
			Match(T__2);
			State = 145;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandsContext : ParserRuleContext {
		public CommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commands; } }
	 
		public CommandsContext() { }
		public virtual void CopyFrom(CommandsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LastCommandContext : CommandsContext {
		public CommandContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public LastCommandContext(CommandsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterLastCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitLastCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotLastCommandContext : CommandsContext {
		public CommandContext @this;
		public CommandsContext next;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc() {
			return GetRuleContext<WscContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		public NotLastCommandContext(CommandsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNotLastCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNotLastCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotLastCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandsContext commands() {
		CommandsContext _localctx = new CommandsContext(Context, State);
		EnterRule(_localctx, 2, RULE_commands);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new NotLastCommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				((NotLastCommandContext)_localctx).@this = command();
				State = 148;
				wsc();
				State = 149;
				((NotLastCommandContext)_localctx).next = commands();
				}
				break;
			case 2:
				_localctx = new LastCommandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				((LastCommandContext)_localctx).@this = command();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	 
		public CommandContext() { }
		public virtual void CopyFrom(CommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermsCommandContext : CommandContext {
		public TermsContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public TermsCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterTermsCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitTermsCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermsCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCommandContext : CommandContext {
		public FunctionContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterFunctionCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitFunctionCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 4, RULE_command);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new FunctionCommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				((FunctionCommandContext)_localctx).@this = function();
				}
				break;
			case 2:
				_localctx = new TermsCommandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 155;
				((TermsCommandContext)_localctx).@this = terms();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermsContext : ParserRuleContext {
		public TermsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terms; } }
	 
		public TermsContext() { }
		public virtual void CopyFrom(TermsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LastTermContext : TermsContext {
		public TermContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public LastTermContext(TermsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterLastTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitLastTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotLastTermContext : TermsContext {
		public TermContext @this;
		public TermsContext next;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc() {
			return GetRuleContext<WscContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public NotLastTermContext(TermsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNotLastTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNotLastTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotLastTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermsContext terms() {
		TermsContext _localctx = new TermsContext(Context, State);
		EnterRule(_localctx, 6, RULE_terms);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new NotLastTermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				((NotLastTermContext)_localctx).@this = term();
				State = 159;
				wsc();
				State = 160;
				((NotLastTermContext)_localctx).next = terms();
				}
				break;
			case 2:
				_localctx = new LastTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 162;
				((LastTermContext)_localctx).@this = term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementTermContext : TermContext {
		public StatementContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterStatementTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitStatementTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ControlTermContext : TermContext {
		public ControlStructuresContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructuresContext controlStructures() {
			return GetRuleContext<ControlStructuresContext>(0);
		}
		public ControlTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterControlTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitControlTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommentTermContext : TermContext {
		public CommentContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public CommentTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterCommentTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitCommentTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 8, RULE_term);
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new ControlTermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				((ControlTermContext)_localctx).@this = controlStructures();
				}
				break;
			case 2:
				_localctx = new StatementTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				((StatementTermContext)_localctx).@this = statement();
				}
				break;
			case 3:
				_localctx = new CommentTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 167;
				((CommentTermContext)_localctx).@this = comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReadValueContext : ValueContext {
		public ReadContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public ReadValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterReadValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitReadValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListElementValueContext : ValueContext {
		public ListElementContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public ListElementContext listElement() {
			return GetRuleContext<ListElementContext>(0);
		}
		public ListElementValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterListElementValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitListElementValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseValueContext : ValueContext {
		public UseContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public UseContext use() {
			return GetRuleContext<UseContext>(0);
		}
		public UseValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterUseValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitUseValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextValueContext : ValueContext {
		public TextContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public TextValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterTextValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitTextValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierValueContext : ValueContext {
		public IdentifierContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterIdentifierValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitIdentifierValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FlagValueContext : ValueContext {
		public FlagContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public FlagContext flag() {
			return GetRuleContext<FlagContext>(0);
		}
		public FlagValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterFlagValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitFlagValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlagValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LengthOfValueContext : ValueContext {
		public LengthOfContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public LengthOfContext lengthOf() {
			return GetRuleContext<LengthOfContext>(0);
		}
		public LengthOfValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterLengthOfValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitLengthOfValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthOfValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberValueContext : ValueContext {
		public NumberContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNumberValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNumberValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotValueContext : ValueContext {
		public ExpressionContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public NContext n() {
			return GetRuleContext<NContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OContext o() {
			return GetRuleContext<OContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNotValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNotValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_value);
		try {
			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new UseValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				((UseValueContext)_localctx).@this = use();
				}
				break;
			case 2:
				_localctx = new ReadValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				((ReadValueContext)_localctx).@this = read();
				}
				break;
			case 3:
				_localctx = new FlagValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 172;
				((FlagValueContext)_localctx).@this = flag();
				}
				break;
			case 4:
				_localctx = new LengthOfValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 173;
				((LengthOfValueContext)_localctx).@this = lengthOf();
				}
				break;
			case 5:
				_localctx = new NotValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 174;
				n();
				State = 175;
				o();
				State = 176;
				t();
				State = 177;
				wsc();
				State = 178;
				((NotValueContext)_localctx).@this = expression(0);
				State = 179;
				wsc();
				}
				break;
			case 6:
				_localctx = new ListElementValueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 181;
				((ListElementValueContext)_localctx).@this = listElement();
				}
				break;
			case 7:
				_localctx = new NumberValueContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 182;
				((NumberValueContext)_localctx).@this = number();
				}
				break;
			case 8:
				_localctx = new TextValueContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 183;
				((TextValueContext)_localctx).@this = text();
				}
				break;
			case 9:
				_localctx = new IdentifierValueContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 184;
				((IdentifierValueContext)_localctx).@this = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthOfContext : ParserRuleContext {
		public IdentifierContext id;
		[System.Diagnostics.DebuggerNonUserCode] public LContext l() {
			return GetRuleContext<LContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext n() {
			return GetRuleContext<NContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GContext g() {
			return GetRuleContext<GContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HContext h() {
			return GetRuleContext<HContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OContext o() {
			return GetRuleContext<OContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FContext f() {
			return GetRuleContext<FContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LengthOfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthOf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterLengthOf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitLengthOf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthOf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthOfContext lengthOf() {
		LengthOfContext _localctx = new LengthOfContext(Context, State);
		EnterRule(_localctx, 12, RULE_lengthOf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			l();
			State = 188;
			e();
			State = 189;
			n();
			State = 190;
			g();
			State = 191;
			t();
			State = 192;
			h();
			State = 193;
			o();
			State = 194;
			f();
			State = 195;
			wsc();
			State = 196;
			Match(T__1);
			State = 197;
			wsc();
			State = 198;
			_localctx.id = identifier();
			State = 199;
			wsc();
			State = 200;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public NContext n() {
			return GetRuleContext<NContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UContext u() {
			return GetRuleContext<UContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MContext m() {
			return GetRuleContext<MContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BContext b() {
			return GetRuleContext<BContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		public NumberTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNumberType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNumberType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FlagTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public FContext f() {
			return GetRuleContext<FContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LContext l() {
			return GetRuleContext<LContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a() {
			return GetRuleContext<AContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GContext g() {
			return GetRuleContext<GContext>(0);
		}
		public FlagTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterFlagType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitFlagType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlagType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TContext[] t() {
			return GetRuleContexts<TContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t(int i) {
			return GetRuleContext<TContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XContext x() {
			return GetRuleContext<XContext>(0);
		}
		public TextTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterTextType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitTextType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListTypeContext : TypeContext {
		public TypeContext tp;
		[System.Diagnostics.DebuggerNonUserCode] public LContext l() {
			return GetRuleContext<LContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i() {
			return GetRuleContext<IContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OContext o() {
			return GetRuleContext<OContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FContext f() {
			return GetRuleContext<FContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__38:
			case T__64:
				_localctx = new NumberTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				n();
				State = 203;
				u();
				State = 204;
				m();
				State = 205;
				b();
				State = 206;
				e();
				State = 207;
				r();
				}
				break;
			case T__44:
			case T__70:
				_localctx = new TextTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				t();
				State = 210;
				e();
				State = 211;
				x();
				State = 212;
				t();
				}
				break;
			case T__30:
			case T__56:
				_localctx = new FlagTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 214;
				f();
				State = 215;
				l();
				State = 216;
				a();
				State = 217;
				g();
				}
				break;
			case T__36:
			case T__62:
				_localctx = new ListTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 219;
				l();
				State = 220;
				i();
				State = 221;
				s();
				State = 222;
				t();
				State = 223;
				wsc();
				State = 224;
				o();
				State = 225;
				f();
				State = 226;
				wsc();
				State = 227;
				((ListTypeContext)_localctx).tp = type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public NonKeywordNameContext id;
		[System.Diagnostics.DebuggerNonUserCode] public NonKeywordNameContext nonKeywordName() {
			return GetRuleContext<NonKeywordNameContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			_localctx.id = nonKeywordName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListElementContext : ParserRuleContext {
		public IdentifierContext id;
		public ExpressionContext index;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListElementContext listElement() {
		ListElementContext _localctx = new ListElementContext(Context, State);
		EnterRule(_localctx, 18, RULE_listElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_localctx.id = identifier();
			State = 234;
			wsc();
			State = 235;
			Match(T__1);
			State = 236;
			wsc();
			State = 237;
			_localctx.index = expression(0);
			State = 238;
			wsc();
			State = 239;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddToListContext : ParserRuleContext {
		public AddToListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addToList; } }
	 
		public AddToListContext() { }
		public virtual void CopyFrom(AddToListContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddNoIndexContext : AddToListContext {
		public ExpressionContext @this;
		public IdentifierContext id;
		[System.Diagnostics.DebuggerNonUserCode] public AContext a() {
			return GetRuleContext<AContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DContext[] d() {
			return GetRuleContexts<DContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DContext d(int i) {
			return GetRuleContext<DContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OContext o() {
			return GetRuleContext<OContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AddNoIndexContext(AddToListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterAddNoIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitAddNoIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddNoIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddWithIndexContext : AddToListContext {
		public ValueContext @this;
		public IdentifierContext id;
		public ExpressionContext index;
		[System.Diagnostics.DebuggerNonUserCode] public AContext[] a() {
			return GetRuleContexts<AContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a(int i) {
			return GetRuleContext<AContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DContext[] d() {
			return GetRuleContexts<DContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DContext d(int i) {
			return GetRuleContext<DContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext[] t() {
			return GetRuleContexts<TContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t(int i) {
			return GetRuleContext<TContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OContext o() {
			return GetRuleContext<OContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddWithIndexContext(AddToListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterAddWithIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitAddWithIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddWithIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddToListContext addToList() {
		AddToListContext _localctx = new AddToListContext(Context, State);
		EnterRule(_localctx, 20, RULE_addToList);
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new AddNoIndexContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 241;
				a();
				State = 242;
				d();
				State = 243;
				d();
				State = 244;
				wsc();
				State = 245;
				((AddNoIndexContext)_localctx).@this = expression(0);
				State = 246;
				wsc();
				State = 247;
				t();
				State = 248;
				o();
				State = 249;
				wsc();
				State = 250;
				((AddNoIndexContext)_localctx).id = identifier();
				}
				break;
			case 2:
				_localctx = new AddWithIndexContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 252;
				a();
				State = 253;
				d();
				State = 254;
				d();
				State = 255;
				wsc();
				State = 256;
				((AddWithIndexContext)_localctx).@this = value();
				State = 257;
				wsc();
				State = 258;
				t();
				State = 259;
				o();
				State = 260;
				wsc();
				State = 261;
				((AddWithIndexContext)_localctx).id = identifier();
				State = 262;
				wsc();
				State = 263;
				a();
				State = 264;
				t();
				State = 265;
				wsc();
				State = 266;
				((AddWithIndexContext)_localctx).index = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonKeywordNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext[] character() {
			return GetRuleContexts<CharacterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character(int i) {
			return GetRuleContext<CharacterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public NonKeywordNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonKeywordName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNonKeywordName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNonKeywordName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonKeywordName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonKeywordNameContext nonKeywordName() {
		NonKeywordNameContext _localctx = new NonKeywordNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_nonKeywordName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			character();
			State = 275;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 273;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__4:
					case T__5:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
						{
						State = 271;
						digit();
						}
						break;
					case T__25:
					case T__26:
					case T__27:
					case T__28:
					case T__29:
					case T__30:
					case T__31:
					case T__32:
					case T__33:
					case T__34:
					case T__35:
					case T__36:
					case T__37:
					case T__38:
					case T__39:
					case T__40:
					case T__41:
					case T__42:
					case T__43:
					case T__44:
					case T__45:
					case T__46:
					case T__47:
					case T__48:
					case T__49:
					case T__50:
					case T__51:
					case T__52:
					case T__53:
					case T__54:
					case T__55:
					case T__56:
					case T__57:
					case T__58:
					case T__59:
					case T__60:
					case T__61:
					case T__62:
					case T__63:
					case T__64:
					case T__65:
					case T__66:
					case T__67:
					case T__68:
					case T__69:
					case T__70:
					case T__71:
					case T__72:
					case T__73:
					case T__74:
					case T__75:
					case T__76:
						{
						State = 272;
						character();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 277;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonZeroNumberContext nonZeroNumber() {
			return GetRuleContext<NonZeroNumberContext>(0);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 24, RULE_number);
		int _la;
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 278;
					Match(T__3);
					}
				}

				State = 281;
				nonZeroNumber();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonZeroNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonZeroDigitContext nonZeroDigit() {
			return GetRuleContext<NonZeroDigitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public NonZeroNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonZeroNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNonZeroNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNonZeroNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonZeroNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonZeroNumberContext nonZeroNumber() {
		NonZeroNumberContext _localctx = new NonZeroNumberContext(Context, State);
		EnterRule(_localctx, 26, RULE_nonZeroNumber);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			nonZeroDigit();
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 286;
					digit();
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DigitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonZeroDigitContext nonZeroDigit() {
			return GetRuleContext<NonZeroDigitContext>(0);
		}
		public DigitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_digit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterDigit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitDigit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDigit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DigitContext digit() {
		DigitContext _localctx = new DigitContext(Context, State);
		EnterRule(_localctx, 28, RULE_digit);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				Match(T__4);
				}
				break;
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				nonZeroDigit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonZeroDigitContext : ParserRuleContext {
		public NonZeroDigitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonZeroDigit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNonZeroDigit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNonZeroDigit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonZeroDigit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonZeroDigitContext nonZeroDigit() {
		NonZeroDigitContext _localctx = new NonZeroDigitContext(Context, State);
		EnterRule(_localctx, 30, RULE_nonZeroDigit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32704L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UContext u() {
			return GetRuleContext<UContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FContext f() {
			return GetRuleContext<FContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a() {
			return GetRuleContext<AContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LContext l() {
			return GetRuleContext<LContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		public FlagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterFlag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitFlag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlagContext flag() {
		FlagContext _localctx = new FlagContext(Context, State);
		EnterRule(_localctx, 32, RULE_flag);
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__44:
			case T__70:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				t();
				State = 299;
				r();
				State = 300;
				u();
				State = 301;
				e();
				}
				break;
			case T__30:
			case T__56:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303;
				f();
				State = 304;
				a();
				State = 305;
				l();
				State = 306;
				s();
				State = 307;
				e();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext[] character() {
			return GetRuleContexts<CharacterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character(int i) {
			return GetRuleContext<CharacterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 34, RULE_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(T__14);
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -50364420L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251799813685247L) != 0)) {
				{
				State = 315;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__25:
				case T__26:
				case T__27:
				case T__28:
				case T__29:
				case T__30:
				case T__31:
				case T__32:
				case T__33:
				case T__34:
				case T__35:
				case T__36:
				case T__37:
				case T__38:
				case T__39:
				case T__40:
				case T__41:
				case T__42:
				case T__43:
				case T__44:
				case T__45:
				case T__46:
				case T__47:
				case T__48:
				case T__49:
				case T__50:
				case T__51:
				case T__52:
				case T__53:
				case T__54:
				case T__55:
				case T__56:
				case T__57:
				case T__58:
				case T__59:
				case T__60:
				case T__61:
				case T__62:
				case T__63:
				case T__64:
				case T__65:
				case T__66:
				case T__67:
				case T__68:
				case T__69:
				case T__70:
				case T__71:
				case T__72:
				case T__73:
				case T__74:
				case T__75:
				case T__76:
					{
					State = 312;
					character();
					}
					break;
				case T__1:
				case T__2:
				case T__3:
				case T__15:
				case T__16:
				case T__17:
				case T__18:
				case T__19:
				case T__20:
				case T__21:
				case T__22:
				case T__77:
				case T__78:
				case T__79:
				case T__80:
				case T__81:
				case T__82:
				case T__83:
				case T__84:
				case T__85:
				case T__86:
				case T__87:
				case T__88:
				case T__89:
				case T__90:
				case T__91:
				case T__92:
				case T__93:
				case T__94:
				case T__95:
				case T__96:
				case T__97:
				case T__98:
				case T__99:
				case T__100:
				case T__101:
				case T__102:
				case T__103:
				case T__104:
				case T__105:
				case T__106:
				case T__107:
				case T__108:
				case T__109:
				case T__110:
				case T__111:
				case T__112:
				case T__113:
					{
					State = 313;
					symbol();
					}
					break;
				case T__4:
				case T__5:
				case T__6:
				case T__7:
				case T__8:
				case T__9:
				case T__10:
				case T__11:
				case T__12:
				case T__13:
					{
					State = 314;
					digit();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 320;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextWithoutNewlineOrQuotationmarksContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext[] character() {
			return GetRuleContexts<CharacterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character(int i) {
			return GetRuleContext<CharacterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolWithoutNewlineContext[] symbolWithoutNewline() {
			return GetRuleContexts<SymbolWithoutNewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolWithoutNewlineContext symbolWithoutNewline(int i) {
			return GetRuleContext<SymbolWithoutNewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public TextWithoutNewlineOrQuotationmarksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textWithoutNewlineOrQuotationmarks; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterTextWithoutNewlineOrQuotationmarks(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitTextWithoutNewlineOrQuotationmarks(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextWithoutNewlineOrQuotationmarks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextWithoutNewlineOrQuotationmarksContext textWithoutNewlineOrQuotationmarks() {
		TextWithoutNewlineOrQuotationmarksContext _localctx = new TextWithoutNewlineOrQuotationmarksContext(Context, State);
		EnterRule(_localctx, 36, RULE_textWithoutNewlineOrQuotationmarks);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 325;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__25:
					case T__26:
					case T__27:
					case T__28:
					case T__29:
					case T__30:
					case T__31:
					case T__32:
					case T__33:
					case T__34:
					case T__35:
					case T__36:
					case T__37:
					case T__38:
					case T__39:
					case T__40:
					case T__41:
					case T__42:
					case T__43:
					case T__44:
					case T__45:
					case T__46:
					case T__47:
					case T__48:
					case T__49:
					case T__50:
					case T__51:
					case T__52:
					case T__53:
					case T__54:
					case T__55:
					case T__56:
					case T__57:
					case T__58:
					case T__59:
					case T__60:
					case T__61:
					case T__62:
					case T__63:
					case T__64:
					case T__65:
					case T__66:
					case T__67:
					case T__68:
					case T__69:
					case T__70:
					case T__71:
					case T__72:
					case T__73:
					case T__74:
					case T__75:
					case T__76:
						{
						State = 322;
						character();
						}
						break;
					case T__1:
					case T__2:
					case T__3:
					case T__15:
					case T__16:
					case T__17:
					case T__18:
					case T__19:
					case T__20:
					case T__21:
					case T__22:
					case T__79:
					case T__80:
					case T__81:
					case T__82:
					case T__83:
					case T__84:
					case T__85:
					case T__86:
					case T__87:
					case T__88:
					case T__89:
					case T__90:
					case T__91:
					case T__92:
					case T__93:
					case T__94:
					case T__95:
					case T__96:
					case T__97:
					case T__98:
					case T__99:
					case T__100:
					case T__101:
					case T__102:
					case T__103:
					case T__104:
					case T__105:
					case T__106:
					case T__107:
					case T__108:
					case T__109:
					case T__110:
					case T__111:
					case T__112:
					case T__113:
						{
						State = 323;
						symbolWithoutNewline();
						}
						break;
					case T__4:
					case T__5:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
						{
						State = 324;
						digit();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 329;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlStructuresContext : ParserRuleContext {
		public ControlStructuresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlStructures; } }
	 
		public ControlStructuresContext() { }
		public virtual void CopyFrom(ControlStructuresContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopStructureContext : ControlStructuresContext {
		public LoopContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc() {
			return GetRuleContext<WscContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public LoopStructureContext(ControlStructuresContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterLoopStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitLoopStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStructure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseStructureContext : ControlStructuresContext {
		public If_elseContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc() {
			return GetRuleContext<WscContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_elseContext if_else() {
			return GetRuleContext<If_elseContext>(0);
		}
		public IfElseStructureContext(ControlStructuresContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterIfElseStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitIfElseStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlStructuresContext controlStructures() {
		ControlStructuresContext _localctx = new ControlStructuresContext(Context, State);
		EnterRule(_localctx, 38, RULE_controlStructures);
		try {
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new LoopStructureContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 330;
				((LoopStructureContext)_localctx).@this = loop();
				State = 331;
				wsc();
				}
				break;
			case 2:
				_localctx = new IfElseStructureContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 333;
				((IfElseStructureContext)_localctx).@this = if_else();
				State = 334;
				wsc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public ExpressionContext expr;
		public TermsContext trms;
		[System.Diagnostics.DebuggerNonUserCode] public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PContext p() {
			return GetRuleContext<PContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a() {
			return GetRuleContext<AContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WContext w() {
			return GetRuleContext<WContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HContext h() {
			return GetRuleContext<HContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i() {
			return GetRuleContext<IContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LContext l() {
			return GetRuleContext<LContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DContext d() {
			return GetRuleContext<DContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OContext o() {
			return GetRuleContext<OContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 40, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			r();
			State = 339;
			e();
			State = 340;
			p();
			State = 341;
			e();
			State = 342;
			a();
			State = 343;
			t();
			State = 344;
			wsc();
			State = 345;
			w();
			State = 346;
			h();
			State = 347;
			i();
			State = 348;
			l();
			State = 349;
			e();
			State = 350;
			wsc();
			State = 351;
			_localctx.expr = expression(0);
			State = 352;
			wsc();
			State = 353;
			d();
			State = 354;
			o();
			State = 355;
			wsc();
			State = 356;
			Match(T__1);
			State = 357;
			wsc();
			State = 358;
			_localctx.trms = terms();
			State = 359;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_elseContext : ParserRuleContext {
		public If_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_else; } }
	 
		public If_elseContext() { }
		public virtual void CopyFrom(If_elseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfWithElseContext : If_elseContext {
		public ExpressionContext expr;
		public TermsContext trms;
		public TermsContext elseTrms;
		[System.Diagnostics.DebuggerNonUserCode] public RContext[] r() {
			return GetRuleContexts<RContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext r(int i) {
			return GetRuleContext<RContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UContext[] u() {
			return GetRuleContexts<UContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UContext u(int i) {
			return GetRuleContext<UContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext[] n() {
			return GetRuleContexts<NContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext n(int i) {
			return GetRuleContext<NContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i() {
			return GetRuleContext<IContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FContext f() {
			return GetRuleContext<FContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LContext l() {
			return GetRuleContext<LContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext[] terms() {
			return GetRuleContexts<TermsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms(int i) {
			return GetRuleContext<TermsContext>(i);
		}
		public IfWithElseContext(If_elseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterIfWithElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitIfWithElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfWithElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfNoElseContext : If_elseContext {
		public ExpressionContext expr;
		public TermsContext trms;
		[System.Diagnostics.DebuggerNonUserCode] public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UContext u() {
			return GetRuleContext<UContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext n() {
			return GetRuleContext<NContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i() {
			return GetRuleContext<IContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FContext f() {
			return GetRuleContext<FContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public IfNoElseContext(If_elseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterIfNoElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitIfNoElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfNoElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_elseContext if_else() {
		If_elseContext _localctx = new If_elseContext(Context, State);
		EnterRule(_localctx, 42, RULE_if_else);
		try {
			State = 405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new IfNoElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 361;
				r();
				State = 362;
				u();
				State = 363;
				n();
				State = 364;
				wsc();
				State = 365;
				i();
				State = 366;
				f();
				State = 367;
				wsc();
				State = 368;
				((IfNoElseContext)_localctx).expr = expression(0);
				State = 369;
				wsc();
				State = 370;
				Match(T__1);
				State = 371;
				wsc();
				State = 372;
				((IfNoElseContext)_localctx).trms = terms();
				State = 373;
				Match(T__2);
				State = 374;
				wsc();
				}
				break;
			case 2:
				_localctx = new IfWithElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 376;
				r();
				State = 377;
				u();
				State = 378;
				n();
				State = 379;
				wsc();
				State = 380;
				i();
				State = 381;
				f();
				State = 382;
				wsc();
				State = 383;
				((IfWithElseContext)_localctx).expr = expression(0);
				State = 384;
				wsc();
				State = 385;
				Match(T__1);
				State = 386;
				wsc();
				State = 387;
				((IfWithElseContext)_localctx).trms = terms();
				State = 388;
				Match(T__2);
				State = 389;
				wsc();
				State = 390;
				e();
				State = 391;
				l();
				State = 392;
				s();
				State = 393;
				e();
				State = 394;
				wsc();
				State = 395;
				r();
				State = 396;
				u();
				State = 397;
				n();
				State = 398;
				wsc();
				State = 399;
				Match(T__1);
				State = 400;
				wsc();
				State = 401;
				((IfWithElseContext)_localctx).elseTrms = terms();
				State = 402;
				Match(T__2);
				State = 403;
				wsc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	 
		public FunctionContext() { }
		public virtual void CopyFrom(FunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionWithTakesContext : FunctionContext {
		public IdentifierContext id;
		public TakesArgumentContext takes;
		public GivesArgumentContext gives;
		public TermsContext trms;
		[System.Diagnostics.DebuggerNonUserCode] public CContext[] c() {
			return GetRuleContexts<CContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CContext c(int i) {
			return GetRuleContext<CContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext[] a() {
			return GetRuleContexts<AContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a(int i) {
			return GetRuleContext<AContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext[] t() {
			return GetRuleContexts<TContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t(int i) {
			return GetRuleContext<TContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FContext f() {
			return GetRuleContext<FContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UContext u() {
			return GetRuleContext<UContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext[] n() {
			return GetRuleContexts<NContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext n(int i) {
			return GetRuleContext<NContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext[] i() {
			return GetRuleContexts<IContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i(int i) {
			return GetRuleContext<IContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OContext o() {
			return GetRuleContext<OContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LContext l() {
			return GetRuleContext<LContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YContext y() {
			return GetRuleContext<YContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TakesArgumentContext takesArgument() {
			return GetRuleContext<TakesArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivesArgumentContext givesArgument() {
			return GetRuleContext<GivesArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public FunctionWithTakesContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterFunctionWithTakes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitFunctionWithTakes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionWithTakes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionNoTakesContext : FunctionContext {
		public IdentifierContext id;
		public GivesArgumentContext gives;
		public TermsContext trms;
		[System.Diagnostics.DebuggerNonUserCode] public CContext[] c() {
			return GetRuleContexts<CContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CContext c(int i) {
			return GetRuleContext<CContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext[] a() {
			return GetRuleContexts<AContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a(int i) {
			return GetRuleContext<AContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext[] t() {
			return GetRuleContexts<TContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t(int i) {
			return GetRuleContext<TContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FContext f() {
			return GetRuleContext<FContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UContext u() {
			return GetRuleContext<UContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext[] n() {
			return GetRuleContexts<NContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext n(int i) {
			return GetRuleContext<NContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext[] i() {
			return GetRuleContexts<IContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i(int i) {
			return GetRuleContext<IContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OContext o() {
			return GetRuleContext<OContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LContext l() {
			return GetRuleContext<LContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YContext y() {
			return GetRuleContext<YContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivesArgumentContext givesArgument() {
			return GetRuleContext<GivesArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public FunctionNoTakesContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterFunctionNoTakes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitFunctionNoTakes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionNoTakes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 44, RULE_function);
		try {
			State = 469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new FunctionNoTakesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 407;
				c();
				State = 408;
				r();
				State = 409;
				e();
				State = 410;
				a();
				State = 411;
				t();
				State = 412;
				e();
				State = 413;
				wsc();
				State = 414;
				f();
				State = 415;
				u();
				State = 416;
				n();
				State = 417;
				c();
				State = 418;
				t();
				State = 419;
				i();
				State = 420;
				o();
				State = 421;
				n();
				State = 422;
				a();
				State = 423;
				l();
				State = 424;
				i();
				State = 425;
				t();
				State = 426;
				y();
				State = 427;
				wsc();
				State = 428;
				((FunctionNoTakesContext)_localctx).id = identifier();
				State = 429;
				wsc();
				State = 430;
				((FunctionNoTakesContext)_localctx).gives = givesArgument();
				State = 431;
				wsc();
				State = 432;
				Match(T__1);
				State = 433;
				wsc();
				State = 434;
				((FunctionNoTakesContext)_localctx).trms = terms();
				State = 435;
				Match(T__2);
				}
				break;
			case 2:
				_localctx = new FunctionWithTakesContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 437;
				c();
				State = 438;
				r();
				State = 439;
				e();
				State = 440;
				a();
				State = 441;
				t();
				State = 442;
				e();
				State = 443;
				wsc();
				State = 444;
				f();
				State = 445;
				u();
				State = 446;
				n();
				State = 447;
				c();
				State = 448;
				t();
				State = 449;
				i();
				State = 450;
				o();
				State = 451;
				n();
				State = 452;
				a();
				State = 453;
				l();
				State = 454;
				i();
				State = 455;
				t();
				State = 456;
				y();
				State = 457;
				wsc();
				State = 458;
				((FunctionWithTakesContext)_localctx).id = identifier();
				State = 459;
				wsc();
				State = 460;
				((FunctionWithTakesContext)_localctx).takes = takesArgument();
				State = 461;
				wsc();
				State = 462;
				((FunctionWithTakesContext)_localctx).gives = givesArgument();
				State = 463;
				wsc();
				State = 464;
				Match(T__1);
				State = 465;
				wsc();
				State = 466;
				((FunctionWithTakesContext)_localctx).trms = terms();
				State = 467;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TakesArgumentContext : ParserRuleContext {
		public ParameterContext param;
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a() {
			return GetRuleContext<AContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KContext k() {
			return GetRuleContext<KContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public TakesArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_takesArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterTakesArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitTakesArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTakesArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TakesArgumentContext takesArgument() {
		TakesArgumentContext _localctx = new TakesArgumentContext(Context, State);
		EnterRule(_localctx, 46, RULE_takesArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			t();
			State = 472;
			a();
			State = 473;
			k();
			State = 474;
			e();
			State = 475;
			s();
			State = 476;
			wsc();
			State = 477;
			Match(T__1);
			State = 478;
			wsc();
			State = 479;
			_localctx.param = parameter();
			State = 480;
			wsc();
			State = 481;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	 
		public ParameterContext() { }
		public virtual void CopyFrom(ParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotLastParameterContext : ParameterContext {
		public TypeContext tp;
		public IdentifierContext id;
		public ParameterContext next;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public NotLastParameterContext(ParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNotLastParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNotLastParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotLastParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LastParameterContext : ParameterContext {
		public TypeContext tp;
		public IdentifierContext id;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc() {
			return GetRuleContext<WscContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LastParameterContext(ParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterLastParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitLastParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 48, RULE_parameter);
		try {
			State = 495;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new NotLastParameterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 483;
				((NotLastParameterContext)_localctx).tp = type();
				State = 484;
				wsc();
				State = 485;
				((NotLastParameterContext)_localctx).id = identifier();
				State = 486;
				wsc();
				State = 487;
				Match(T__15);
				State = 488;
				wsc();
				State = 489;
				((NotLastParameterContext)_localctx).next = parameter();
				}
				break;
			case 2:
				_localctx = new LastParameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 491;
				((LastParameterContext)_localctx).tp = type();
				State = 492;
				wsc();
				State = 493;
				((LastParameterContext)_localctx).id = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GivesArgumentContext : ParserRuleContext {
		public GivesArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_givesArgument; } }
	 
		public GivesArgumentContext() { }
		public virtual void CopyFrom(GivesArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GivesNothingContext : GivesArgumentContext {
		public NothingContext tp;
		[System.Diagnostics.DebuggerNonUserCode] public GContext g() {
			return GetRuleContext<GContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i() {
			return GetRuleContext<IContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VContext v() {
			return GetRuleContext<VContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc() {
			return GetRuleContext<WscContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NothingContext nothing() {
			return GetRuleContext<NothingContext>(0);
		}
		public GivesNothingContext(GivesArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterGivesNothing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitGivesNothing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGivesNothing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GivesTypeContext : GivesArgumentContext {
		public TypeContext tp;
		[System.Diagnostics.DebuggerNonUserCode] public GContext g() {
			return GetRuleContext<GContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i() {
			return GetRuleContext<IContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VContext v() {
			return GetRuleContext<VContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc() {
			return GetRuleContext<WscContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public GivesTypeContext(GivesArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterGivesType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitGivesType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGivesType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GivesArgumentContext givesArgument() {
		GivesArgumentContext _localctx = new GivesArgumentContext(Context, State);
		EnterRule(_localctx, 50, RULE_givesArgument);
		try {
			State = 513;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new GivesNothingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 497;
				g();
				State = 498;
				i();
				State = 499;
				v();
				State = 500;
				e();
				State = 501;
				s();
				State = 502;
				wsc();
				State = 503;
				((GivesNothingContext)_localctx).tp = nothing();
				}
				break;
			case 2:
				_localctx = new GivesTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 505;
				g();
				State = 506;
				i();
				State = 507;
				v();
				State = 508;
				e();
				State = 509;
				s();
				State = 510;
				wsc();
				State = 511;
				((GivesTypeContext)_localctx).tp = type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NothingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NContext[] n() {
			return GetRuleContexts<NContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext n(int i) {
			return GetRuleContext<NContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OContext o() {
			return GetRuleContext<OContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HContext h() {
			return GetRuleContext<HContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i() {
			return GetRuleContext<IContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GContext g() {
			return GetRuleContext<GContext>(0);
		}
		public NothingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nothing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNothing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNothing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNothing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NothingContext nothing() {
		NothingContext _localctx = new NothingContext(Context, State);
		EnterRule(_localctx, 52, RULE_nothing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			n();
			State = 516;
			o();
			State = 517;
			t();
			State = 518;
			h();
			State = 519;
			i();
			State = 520;
			n();
			State = 521;
			g();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CreateStatementContext : StatementContext {
		public CreateContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContext create() {
			return GetRuleContext<CreateContext>(0);
		}
		public CreateStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterCreateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitCreateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStatementContext : StatementContext {
		public PrintContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public PrintStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddToListStatementContext : StatementContext {
		public AddToListContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddToListContext addToList() {
			return GetRuleContext<AddToListContext>(0);
		}
		public AddToListStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterAddToListStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitAddToListStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddToListStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseStatementContext : StatementContext {
		public UseContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseContext use() {
			return GetRuleContext<UseContext>(0);
		}
		public UseStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterUseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitUseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : StatementContext {
		public BreakContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakContext @break() {
			return GetRuleContext<BreakContext>(0);
		}
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadStatementContext : StatementContext {
		public ReadContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public ReadStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatementContext : StatementContext {
		public AssignmentContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GiveStatementContext : StatementContext {
		public GiveContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GiveContext give() {
			return GetRuleContext<GiveContext>(0);
		}
		public GiveStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterGiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitGiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGiveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_statement);
		try {
			State = 563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				_localctx = new CreateStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 523;
				((CreateStatementContext)_localctx).@this = create();
				State = 524;
				wsc();
				State = 525;
				Match(T__16);
				State = 526;
				wsc();
				}
				break;
			case 2:
				_localctx = new GiveStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 528;
				((GiveStatementContext)_localctx).@this = give();
				State = 529;
				wsc();
				State = 530;
				Match(T__16);
				State = 531;
				wsc();
				}
				break;
			case 3:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 533;
				((BreakStatementContext)_localctx).@this = @break();
				State = 534;
				wsc();
				State = 535;
				Match(T__16);
				State = 536;
				wsc();
				}
				break;
			case 4:
				_localctx = new UseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 538;
				((UseStatementContext)_localctx).@this = use();
				State = 539;
				wsc();
				State = 540;
				Match(T__16);
				State = 541;
				wsc();
				}
				break;
			case 5:
				_localctx = new PrintStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 543;
				((PrintStatementContext)_localctx).@this = print();
				State = 544;
				wsc();
				State = 545;
				Match(T__16);
				State = 546;
				wsc();
				}
				break;
			case 6:
				_localctx = new ReadStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 548;
				((ReadStatementContext)_localctx).@this = read();
				State = 549;
				wsc();
				State = 550;
				Match(T__16);
				State = 551;
				wsc();
				}
				break;
			case 7:
				_localctx = new AddToListStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 553;
				((AddToListStatementContext)_localctx).@this = addToList();
				State = 554;
				wsc();
				State = 555;
				Match(T__16);
				State = 556;
				wsc();
				}
				break;
			case 8:
				_localctx = new AssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 558;
				((AssignStatementContext)_localctx).@this = assignment();
				State = 559;
				wsc();
				State = 560;
				Match(T__16);
				State = 561;
				wsc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public IdentifierContext id;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 56, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			_localctx.id = identifier();
			State = 566;
			wsc();
			State = 567;
			Match(T__17);
			State = 568;
			wsc();
			State = 569;
			_localctx.expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContext : ParserRuleContext {
		public CreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create; } }
	 
		public CreateContext() { }
		public virtual void CopyFrom(CreateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CreateWithInputContext : CreateContext {
		public TypeContext tp;
		public IdentifierContext id;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public CContext c() {
			return GetRuleContext<CContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a() {
			return GetRuleContext<AContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CreateWithInputContext(CreateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterCreateWithInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitCreateWithInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateWithInput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateNoInputContext : CreateContext {
		public TypeContext tp;
		public IdentifierContext id;
		[System.Diagnostics.DebuggerNonUserCode] public CContext c() {
			return GetRuleContext<CContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a() {
			return GetRuleContext<AContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CreateNoInputContext(CreateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterCreateNoInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitCreateNoInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateNoInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContext create() {
		CreateContext _localctx = new CreateContext(Context, State);
		EnterRule(_localctx, 58, RULE_create);
		try {
			State = 597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				_localctx = new CreateNoInputContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 571;
				c();
				State = 572;
				r();
				State = 573;
				e();
				State = 574;
				a();
				State = 575;
				t();
				State = 576;
				e();
				State = 577;
				wsc();
				State = 578;
				((CreateNoInputContext)_localctx).tp = type();
				State = 579;
				wsc();
				State = 580;
				((CreateNoInputContext)_localctx).id = identifier();
				}
				break;
			case 2:
				_localctx = new CreateWithInputContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 582;
				c();
				State = 583;
				r();
				State = 584;
				e();
				State = 585;
				a();
				State = 586;
				t();
				State = 587;
				e();
				State = 588;
				wsc();
				State = 589;
				((CreateWithInputContext)_localctx).tp = type();
				State = 590;
				wsc();
				State = 591;
				((CreateWithInputContext)_localctx).id = identifier();
				State = 592;
				wsc();
				State = 593;
				Match(T__17);
				State = 594;
				wsc();
				State = 595;
				((CreateWithInputContext)_localctx).expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GiveContext : ParserRuleContext {
		public GiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_give; } }
	 
		public GiveContext() { }
		public virtual void CopyFrom(GiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NothingGiveContext : GiveContext {
		public NothingContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public GContext g() {
			return GetRuleContext<GContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i() {
			return GetRuleContext<IContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VContext v() {
			return GetRuleContext<VContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc() {
			return GetRuleContext<WscContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NothingContext nothing() {
			return GetRuleContext<NothingContext>(0);
		}
		public NothingGiveContext(GiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNothingGive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNothingGive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNothingGive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionGiveContext : GiveContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public GContext g() {
			return GetRuleContext<GContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i() {
			return GetRuleContext<IContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VContext v() {
			return GetRuleContext<VContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc() {
			return GetRuleContext<WscContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionGiveContext(GiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterExpressionGive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitExpressionGive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionGive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseGiveContext : GiveContext {
		public UseContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public GContext g() {
			return GetRuleContext<GContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i() {
			return GetRuleContext<IContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VContext v() {
			return GetRuleContext<VContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc() {
			return GetRuleContext<WscContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseContext use() {
			return GetRuleContext<UseContext>(0);
		}
		public UseGiveContext(GiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterUseGive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitUseGive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseGive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GiveContext give() {
		GiveContext _localctx = new GiveContext(Context, State);
		EnterRule(_localctx, 60, RULE_give);
		try {
			State = 620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new UseGiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 599;
				g();
				State = 600;
				i();
				State = 601;
				v();
				State = 602;
				e();
				State = 603;
				wsc();
				State = 604;
				((UseGiveContext)_localctx).@this = use();
				}
				break;
			case 2:
				_localctx = new NothingGiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 606;
				g();
				State = 607;
				i();
				State = 608;
				v();
				State = 609;
				e();
				State = 610;
				wsc();
				State = 611;
				((NothingGiveContext)_localctx).@this = nothing();
				}
				break;
			case 3:
				_localctx = new ExpressionGiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 613;
				g();
				State = 614;
				i();
				State = 615;
				v();
				State = 616;
				e();
				State = 617;
				wsc();
				State = 618;
				((ExpressionGiveContext)_localctx).expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BContext b() {
			return GetRuleContext<BContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a() {
			return GetRuleContext<AContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KContext k() {
			return GetRuleContext<KContext>(0);
		}
		public BreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakContext @break() {
		BreakContext _localctx = new BreakContext(Context, State);
		EnterRule(_localctx, 62, RULE_break);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			b();
			State = 623;
			r();
			State = 624;
			e();
			State = 625;
			a();
			State = 626;
			k();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseContext : ParserRuleContext {
		public UseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use; } }
	 
		public UseContext() { }
		public virtual void CopyFrom(UseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UseWithInputContext : UseContext {
		public IdentifierContext id;
		public UseInputContext input;
		[System.Diagnostics.DebuggerNonUserCode] public UContext u() {
			return GetRuleContext<UContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseInputContext useInput() {
			return GetRuleContext<UseInputContext>(0);
		}
		public UseWithInputContext(UseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterUseWithInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitUseWithInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseWithInput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseNoInputContext : UseContext {
		public IdentifierContext id;
		[System.Diagnostics.DebuggerNonUserCode] public UContext u() {
			return GetRuleContext<UContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UseNoInputContext(UseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterUseNoInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitUseNoInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseNoInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseContext use() {
		UseContext _localctx = new UseContext(Context, State);
		EnterRule(_localctx, 64, RULE_use);
		try {
			State = 651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				_localctx = new UseNoInputContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 628;
				u();
				State = 629;
				s();
				State = 630;
				e();
				State = 631;
				wsc();
				State = 632;
				((UseNoInputContext)_localctx).id = identifier();
				State = 638;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 633;
					wsc();
					State = 634;
					Match(T__1);
					State = 635;
					wsc();
					State = 636;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new UseWithInputContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 640;
				u();
				State = 641;
				s();
				State = 642;
				e();
				State = 643;
				wsc();
				State = 644;
				((UseWithInputContext)_localctx).id = identifier();
				State = 645;
				wsc();
				State = 646;
				Match(T__1);
				State = 647;
				((UseWithInputContext)_localctx).input = useInput();
				State = 648;
				wsc();
				State = 649;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseInputContext : ParserRuleContext {
		public UseInputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useInput; } }
	 
		public UseInputContext() { }
		public virtual void CopyFrom(UseInputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LastInputContext : UseInputContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LastInputContext(UseInputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterLastInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitLastInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastInput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotLastInputContext : UseInputContext {
		public ExpressionContext expr;
		public UseInputContext next;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseInputContext useInput() {
			return GetRuleContext<UseInputContext>(0);
		}
		public NotLastInputContext(UseInputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterNotLastInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitNotLastInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotLastInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseInputContext useInput() {
		UseInputContext _localctx = new UseInputContext(Context, State);
		EnterRule(_localctx, 66, RULE_useInput);
		try {
			State = 661;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new NotLastInputContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 653;
				wsc();
				State = 654;
				((NotLastInputContext)_localctx).expr = expression(0);
				State = 655;
				wsc();
				State = 656;
				Match(T__15);
				State = 657;
				wsc();
				State = 658;
				((NotLastInputContext)_localctx).next = useInput();
				}
				break;
			case 2:
				_localctx = new LastInputContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 660;
				((LastInputContext)_localctx).expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public PContext p() {
			return GetRuleContext<PContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext[] r() {
			return GetRuleContexts<RContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext r(int i) {
			return GetRuleContext<RContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i() {
			return GetRuleContext<IContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext[] n() {
			return GetRuleContexts<NContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext n(int i) {
			return GetRuleContext<NContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext[] t() {
			return GetRuleContexts<TContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t(int i) {
			return GetRuleContext<TContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OContext o() {
			return GetRuleContext<OContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CContext c() {
			return GetRuleContext<CContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 68, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			p();
			State = 664;
			r();
			State = 665;
			i();
			State = 666;
			n();
			State = 667;
			t();
			State = 668;
			wsc();
			State = 669;
			t();
			State = 670;
			o();
			State = 671;
			wsc();
			State = 672;
			s();
			State = 673;
			c();
			State = 674;
			r();
			State = 675;
			e();
			State = 676;
			e();
			State = 677;
			n();
			State = 678;
			wsc();
			State = 679;
			Match(T__1);
			State = 680;
			wsc();
			State = 681;
			_localctx.expr = expression(0);
			State = 682;
			wsc();
			State = 683;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RContext[] r() {
			return GetRuleContexts<RContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext r(int i) {
			return GetRuleContext<RContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a() {
			return GetRuleContext<AContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DContext d() {
			return GetRuleContext<DContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UContext[] u() {
			return GetRuleContexts<UContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UContext u(int i) {
			return GetRuleContext<UContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IContext i() {
			return GetRuleContext<IContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext n() {
			return GetRuleContext<NContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PContext p() {
			return GetRuleContext<PContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(Context, State);
		EnterRule(_localctx, 70, RULE_read);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			r();
			State = 686;
			e();
			State = 687;
			a();
			State = 688;
			d();
			State = 689;
			wsc();
			State = 690;
			u();
			State = 691;
			s();
			State = 692;
			e();
			State = 693;
			r();
			State = 694;
			wsc();
			State = 695;
			i();
			State = 696;
			n();
			State = 697;
			p();
			State = 698;
			u();
			State = 699;
			t();
			State = 700;
			wsc();
			State = 705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 701;
				Match(T__1);
				State = 702;
				wsc();
				State = 703;
				Match(T__2);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueExpressionContext : ExpressionContext {
		public ValueContext @this;
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ValueExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterValueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitValueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public OperatorContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public InfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterInfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitInfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConvertExpressionContext : ExpressionContext {
		public ExpressionContext expr;
		public TypeContext tp;
		[System.Diagnostics.DebuggerNonUserCode] public WscContext[] wsc() {
			return GetRuleContexts<WscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc(int i) {
			return GetRuleContext<WscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a() {
			return GetRuleContext<AContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConvertExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterConvertExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitConvertExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvertExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensExpressionContext : ExpressionContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParensExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterParensExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitParensExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParensExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				_localctx = new ParensExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 708;
				Match(T__1);
				State = 709;
				((ParensExpressionContext)_localctx).expr = expression(0);
				State = 710;
				Match(T__2);
				}
				break;
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
				{
				_localctx = new ValueExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 712;
				((ValueExpressionContext)_localctx).@this = value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 730;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 728;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 715;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 716;
						wsc();
						State = 717;
						((InfixExpressionContext)_localctx).op = @operator();
						State = 718;
						wsc();
						State = 719;
						((InfixExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 2:
						{
						_localctx = new ConvertExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ConvertExpressionContext)_localctx).expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 721;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 722;
						wsc();
						State = 723;
						a();
						State = 724;
						s();
						State = 725;
						wsc();
						State = 726;
						((ConvertExpressionContext)_localctx).tp = type();
						}
						break;
					}
					} 
				}
				State = 732;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MContext m() {
			return GetRuleContext<MContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OContext[] o() {
			return GetRuleContexts<OContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OContext o(int i) {
			return GetRuleContext<OContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DContext d() {
			return GetRuleContext<DContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UContext u() {
			return GetRuleContext<UContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LContext l() {
			return GetRuleContext<LContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AContext a() {
			return GetRuleContext<AContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NContext n() {
			return GetRuleContext<NContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_operator);
		try {
			State = 756;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 733;
				Match(T__18);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 734;
				Match(T__3);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 3);
				{
				State = 735;
				Match(T__19);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 4);
				{
				State = 736;
				Match(T__20);
				}
				break;
			case T__37:
			case T__63:
				EnterOuterAlt(_localctx, 5);
				{
				State = 737;
				m();
				State = 738;
				o();
				State = 739;
				d();
				State = 740;
				u();
				State = 741;
				l();
				State = 742;
				o();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 6);
				{
				State = 744;
				Match(T__17);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 7);
				{
				State = 745;
				Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 8);
				{
				State = 746;
				Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 9);
				{
				State = 747;
				Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 10);
				{
				State = 748;
				Match(T__24);
				}
				break;
			case T__25:
			case T__51:
				EnterOuterAlt(_localctx, 11);
				{
				State = 749;
				a();
				State = 750;
				n();
				State = 751;
				d();
				}
				break;
			case T__39:
			case T__65:
				EnterOuterAlt(_localctx, 12);
				{
				State = 753;
				o();
				State = 754;
				r();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(Context, State);
		EnterRule(_localctx, 76, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & 4503599627370495L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolWithoutNewlineContext symbolWithoutNewline() {
			return GetRuleContext<SymbolWithoutNewlineContext>(0);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 78, RULE_symbol);
		try {
			State = 763;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__2:
			case T__3:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__100:
			case T__101:
			case T__102:
			case T__103:
			case T__104:
			case T__105:
			case T__106:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__112:
			case T__113:
				EnterOuterAlt(_localctx, 1);
				{
				State = 760;
				symbolWithoutNewline();
				}
				break;
			case T__77:
				EnterOuterAlt(_localctx, 2);
				{
				State = 761;
				Match(T__77);
				}
				break;
			case T__78:
				EnterOuterAlt(_localctx, 3);
				{
				State = 762;
				Match(T__78);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolWithoutNewlineContext : ParserRuleContext {
		public SymbolWithoutNewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolWithoutNewline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterSymbolWithoutNewline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitSymbolWithoutNewline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolWithoutNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolWithoutNewlineContext symbolWithoutNewline() {
		SymbolWithoutNewlineContext _localctx = new SymbolWithoutNewlineContext(Context, State);
		EnterRule(_localctx, 80, RULE_symbolWithoutNewline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16711708L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 34359738367L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WscContext : ParserRuleContext {
		public WscContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wsc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterWsc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitWsc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWsc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WscContext wsc() {
		WscContext _localctx = new WscContext(Context, State);
		EnterRule(_localctx, 82, RULE_wsc);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 767;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 68719505411L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 772;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextWithoutNewlineOrQuotationmarksContext textWithoutNewlineOrQuotationmarks() {
			return GetRuleContext<TextWithoutNewlineOrQuotationmarksContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WscContext wsc() {
			return GetRuleContext<WscContext>(0);
		}
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 84, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			Match(T__101);
			State = 774;
			textWithoutNewlineOrQuotationmarks();
			State = 775;
			wsc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AContext : ParserRuleContext {
		public AContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterA(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitA(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AContext a() {
		AContext _localctx = new AContext(Context, State);
		EnterRule(_localctx, 86, RULE_a);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777;
			_la = TokenStream.LA(1);
			if ( !(_la==T__25 || _la==T__51) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BContext : ParserRuleContext {
		public BContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_b; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterB(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitB(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitB(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BContext b() {
		BContext _localctx = new BContext(Context, State);
		EnterRule(_localctx, 88, RULE_b);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			_la = TokenStream.LA(1);
			if ( !(_la==T__26 || _la==T__52) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CContext : ParserRuleContext {
		public CContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitC(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CContext c() {
		CContext _localctx = new CContext(Context, State);
		EnterRule(_localctx, 90, RULE_c);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			_la = TokenStream.LA(1);
			if ( !(_la==T__27 || _la==T__53) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DContext : ParserRuleContext {
		public DContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DContext d() {
		DContext _localctx = new DContext(Context, State);
		EnterRule(_localctx, 92, RULE_d);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			_la = TokenStream.LA(1);
			if ( !(_la==T__28 || _la==T__54) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EContext : ParserRuleContext {
		public EContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EContext e() {
		EContext _localctx = new EContext(Context, State);
		EnterRule(_localctx, 94, RULE_e);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785;
			_la = TokenStream.LA(1);
			if ( !(_la==T__29 || _la==T__55) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FContext : ParserRuleContext {
		public FContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FContext f() {
		FContext _localctx = new FContext(Context, State);
		EnterRule(_localctx, 96, RULE_f);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			_la = TokenStream.LA(1);
			if ( !(_la==T__30 || _la==T__56) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GContext : ParserRuleContext {
		public GContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_g; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterG(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitG(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitG(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GContext g() {
		GContext _localctx = new GContext(Context, State);
		EnterRule(_localctx, 98, RULE_g);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			_la = TokenStream.LA(1);
			if ( !(_la==T__31 || _la==T__57) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HContext : ParserRuleContext {
		public HContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_h; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitH(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitH(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HContext h() {
		HContext _localctx = new HContext(Context, State);
		EnterRule(_localctx, 100, RULE_h);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			_la = TokenStream.LA(1);
			if ( !(_la==T__32 || _la==T__58) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IContext : ParserRuleContext {
		public IContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_i; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterI(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitI(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitI(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IContext i() {
		IContext _localctx = new IContext(Context, State);
		EnterRule(_localctx, 102, RULE_i);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793;
			_la = TokenStream.LA(1);
			if ( !(_la==T__33 || _la==T__59) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JContext : ParserRuleContext {
		public JContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_j; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterJ(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitJ(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJ(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JContext j() {
		JContext _localctx = new JContext(Context, State);
		EnterRule(_localctx, 104, RULE_j);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			_la = TokenStream.LA(1);
			if ( !(_la==T__34 || _la==T__60) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KContext : ParserRuleContext {
		public KContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_k; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterK(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitK(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitK(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KContext k() {
		KContext _localctx = new KContext(Context, State);
		EnterRule(_localctx, 106, RULE_k);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			_la = TokenStream.LA(1);
			if ( !(_la==T__35 || _la==T__61) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LContext : ParserRuleContext {
		public LContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_l; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LContext l() {
		LContext _localctx = new LContext(Context, State);
		EnterRule(_localctx, 108, RULE_l);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			_la = TokenStream.LA(1);
			if ( !(_la==T__36 || _la==T__62) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MContext : ParserRuleContext {
		public MContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_m; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitM(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MContext m() {
		MContext _localctx = new MContext(Context, State);
		EnterRule(_localctx, 110, RULE_m);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			_la = TokenStream.LA(1);
			if ( !(_la==T__37 || _la==T__63) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NContext : ParserRuleContext {
		public NContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_n; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitN(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NContext n() {
		NContext _localctx = new NContext(Context, State);
		EnterRule(_localctx, 112, RULE_n);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			_la = TokenStream.LA(1);
			if ( !(_la==T__38 || _la==T__64) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OContext : ParserRuleContext {
		public OContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_o; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterO(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitO(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitO(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OContext o() {
		OContext _localctx = new OContext(Context, State);
		EnterRule(_localctx, 114, RULE_o);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			_la = TokenStream.LA(1);
			if ( !(_la==T__39 || _la==T__65) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PContext : ParserRuleContext {
		public PContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_p; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PContext p() {
		PContext _localctx = new PContext(Context, State);
		EnterRule(_localctx, 116, RULE_p);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			_la = TokenStream.LA(1);
			if ( !(_la==T__40 || _la==T__66) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QContext : ParserRuleContext {
		public QContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterQ(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitQ(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QContext q() {
		QContext _localctx = new QContext(Context, State);
		EnterRule(_localctx, 118, RULE_q);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			_la = TokenStream.LA(1);
			if ( !(_la==T__41 || _la==T__67) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RContext : ParserRuleContext {
		public RContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_r; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitR(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RContext r() {
		RContext _localctx = new RContext(Context, State);
		EnterRule(_localctx, 120, RULE_r);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			_la = TokenStream.LA(1);
			if ( !(_la==T__42 || _la==T__68) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SContext : ParserRuleContext {
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 122, RULE_s);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			_la = TokenStream.LA(1);
			if ( !(_la==T__43 || _la==T__69) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TContext : ParserRuleContext {
		public TContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitT(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TContext t() {
		TContext _localctx = new TContext(Context, State);
		EnterRule(_localctx, 124, RULE_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			_la = TokenStream.LA(1);
			if ( !(_la==T__44 || _la==T__70) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UContext : ParserRuleContext {
		public UContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_u; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterU(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitU(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitU(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UContext u() {
		UContext _localctx = new UContext(Context, State);
		EnterRule(_localctx, 126, RULE_u);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			_la = TokenStream.LA(1);
			if ( !(_la==T__45 || _la==T__71) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VContext : ParserRuleContext {
		public VContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_v; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterV(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitV(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitV(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VContext v() {
		VContext _localctx = new VContext(Context, State);
		EnterRule(_localctx, 128, RULE_v);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			_la = TokenStream.LA(1);
			if ( !(_la==T__46 || _la==T__72) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WContext : ParserRuleContext {
		public WContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_w; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterW(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitW(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitW(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WContext w() {
		WContext _localctx = new WContext(Context, State);
		EnterRule(_localctx, 130, RULE_w);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			_la = TokenStream.LA(1);
			if ( !(_la==T__47 || _la==T__73) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XContext : ParserRuleContext {
		public XContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterX(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitX(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XContext x() {
		XContext _localctx = new XContext(Context, State);
		EnterRule(_localctx, 132, RULE_x);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			_la = TokenStream.LA(1);
			if ( !(_la==T__48 || _la==T__74) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YContext : ParserRuleContext {
		public YContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_y; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YContext y() {
		YContext _localctx = new YContext(Context, State);
		EnterRule(_localctx, 134, RULE_y);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			_la = TokenStream.LA(1);
			if ( !(_la==T__49 || _la==T__75) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZContext : ParserRuleContext {
		public ZContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_z; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.EnterZ(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISyntaxListener typedListener = listener as ISyntaxListener;
			if (typedListener != null) typedListener.ExitZ(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZ(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZContext z() {
		ZContext _localctx = new ZContext(Context, State);
		EnterRule(_localctx, 136, RULE_z);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			_la = TokenStream.LA(1);
			if ( !(_la==T__50 || _la==T__76) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 36: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,114,830,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,153,8,1,1,2,1,2,3,2,157,8,2,1,
		3,1,3,1,3,1,3,1,3,3,3,164,8,3,1,4,1,4,1,4,3,4,169,8,4,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,186,8,5,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,3,7,230,8,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,269,8,
		10,1,11,1,11,1,11,5,11,274,8,11,10,11,12,11,277,9,11,1,12,3,12,280,8,12,
		1,12,1,12,3,12,284,8,12,1,13,1,13,5,13,288,8,13,10,13,12,13,291,9,13,1,
		14,1,14,3,14,295,8,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,3,16,310,8,16,1,17,1,17,1,17,1,17,5,17,316,8,17,10,17,12,
		17,319,9,17,1,17,1,17,1,18,1,18,1,18,5,18,326,8,18,10,18,12,18,329,9,18,
		1,19,1,19,1,19,1,19,1,19,1,19,3,19,337,8,19,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,3,21,406,8,21,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		3,22,470,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,496,
		8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,3,25,514,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,564,8,27,
		1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,3,29,598,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,
		30,621,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,1,32,3,32,639,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,3,32,652,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
		3,33,662,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,3,35,706,8,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,714,8,36,
		1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,
		729,8,36,10,36,12,36,732,9,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
		1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
		1,37,3,37,757,8,37,1,38,1,38,1,39,1,39,1,39,3,39,764,8,39,1,40,1,40,1,
		41,5,41,769,8,41,10,41,12,41,772,9,41,1,42,1,42,1,42,1,42,1,43,1,43,1,
		44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,
		51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,
		58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,
		65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,68,0,1,72,69,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
		64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,0,30,1,0,6,
		14,1,0,26,77,3,0,2,4,16,23,80,114,3,0,78,79,90,92,114,114,2,0,26,26,52,
		52,2,0,27,27,53,53,2,0,28,28,54,54,2,0,29,29,55,55,2,0,30,30,56,56,2,0,
		31,31,57,57,2,0,32,32,58,58,2,0,33,33,59,59,2,0,34,34,60,60,2,0,35,35,
		61,61,2,0,36,36,62,62,2,0,37,37,63,63,2,0,38,38,64,64,2,0,39,39,65,65,
		2,0,40,40,66,66,2,0,41,41,67,67,2,0,42,42,68,68,2,0,43,43,69,69,2,0,44,
		44,70,70,2,0,45,45,71,71,2,0,46,46,72,72,2,0,47,47,73,73,2,0,48,48,74,
		74,2,0,49,49,75,75,2,0,50,50,76,76,2,0,51,51,77,77,826,0,138,1,0,0,0,2,
		152,1,0,0,0,4,156,1,0,0,0,6,163,1,0,0,0,8,168,1,0,0,0,10,185,1,0,0,0,12,
		187,1,0,0,0,14,229,1,0,0,0,16,231,1,0,0,0,18,233,1,0,0,0,20,268,1,0,0,
		0,22,270,1,0,0,0,24,283,1,0,0,0,26,285,1,0,0,0,28,294,1,0,0,0,30,296,1,
		0,0,0,32,309,1,0,0,0,34,311,1,0,0,0,36,327,1,0,0,0,38,336,1,0,0,0,40,338,
		1,0,0,0,42,405,1,0,0,0,44,469,1,0,0,0,46,471,1,0,0,0,48,495,1,0,0,0,50,
		513,1,0,0,0,52,515,1,0,0,0,54,563,1,0,0,0,56,565,1,0,0,0,58,597,1,0,0,
		0,60,620,1,0,0,0,62,622,1,0,0,0,64,651,1,0,0,0,66,661,1,0,0,0,68,663,1,
		0,0,0,70,685,1,0,0,0,72,713,1,0,0,0,74,756,1,0,0,0,76,758,1,0,0,0,78,763,
		1,0,0,0,80,765,1,0,0,0,82,770,1,0,0,0,84,773,1,0,0,0,86,777,1,0,0,0,88,
		779,1,0,0,0,90,781,1,0,0,0,92,783,1,0,0,0,94,785,1,0,0,0,96,787,1,0,0,
		0,98,789,1,0,0,0,100,791,1,0,0,0,102,793,1,0,0,0,104,795,1,0,0,0,106,797,
		1,0,0,0,108,799,1,0,0,0,110,801,1,0,0,0,112,803,1,0,0,0,114,805,1,0,0,
		0,116,807,1,0,0,0,118,809,1,0,0,0,120,811,1,0,0,0,122,813,1,0,0,0,124,
		815,1,0,0,0,126,817,1,0,0,0,128,819,1,0,0,0,130,821,1,0,0,0,132,823,1,
		0,0,0,134,825,1,0,0,0,136,827,1,0,0,0,138,139,5,1,0,0,139,140,3,82,41,
		0,140,141,5,2,0,0,141,142,3,82,41,0,142,143,3,2,1,0,143,144,3,82,41,0,
		144,145,5,3,0,0,145,146,5,0,0,1,146,1,1,0,0,0,147,148,3,4,2,0,148,149,
		3,82,41,0,149,150,3,2,1,0,150,153,1,0,0,0,151,153,3,4,2,0,152,147,1,0,
		0,0,152,151,1,0,0,0,153,3,1,0,0,0,154,157,3,44,22,0,155,157,3,6,3,0,156,
		154,1,0,0,0,156,155,1,0,0,0,157,5,1,0,0,0,158,159,3,8,4,0,159,160,3,82,
		41,0,160,161,3,6,3,0,161,164,1,0,0,0,162,164,3,8,4,0,163,158,1,0,0,0,163,
		162,1,0,0,0,164,7,1,0,0,0,165,169,3,38,19,0,166,169,3,54,27,0,167,169,
		3,84,42,0,168,165,1,0,0,0,168,166,1,0,0,0,168,167,1,0,0,0,169,9,1,0,0,
		0,170,186,3,64,32,0,171,186,3,70,35,0,172,186,3,32,16,0,173,186,3,12,6,
		0,174,175,3,112,56,0,175,176,3,114,57,0,176,177,3,124,62,0,177,178,3,82,
		41,0,178,179,3,72,36,0,179,180,3,82,41,0,180,186,1,0,0,0,181,186,3,18,
		9,0,182,186,3,24,12,0,183,186,3,34,17,0,184,186,3,16,8,0,185,170,1,0,0,
		0,185,171,1,0,0,0,185,172,1,0,0,0,185,173,1,0,0,0,185,174,1,0,0,0,185,
		181,1,0,0,0,185,182,1,0,0,0,185,183,1,0,0,0,185,184,1,0,0,0,186,11,1,0,
		0,0,187,188,3,108,54,0,188,189,3,94,47,0,189,190,3,112,56,0,190,191,3,
		98,49,0,191,192,3,124,62,0,192,193,3,100,50,0,193,194,3,114,57,0,194,195,
		3,96,48,0,195,196,3,82,41,0,196,197,5,2,0,0,197,198,3,82,41,0,198,199,
		3,16,8,0,199,200,3,82,41,0,200,201,5,3,0,0,201,13,1,0,0,0,202,203,3,112,
		56,0,203,204,3,126,63,0,204,205,3,110,55,0,205,206,3,88,44,0,206,207,3,
		94,47,0,207,208,3,120,60,0,208,230,1,0,0,0,209,210,3,124,62,0,210,211,
		3,94,47,0,211,212,3,132,66,0,212,213,3,124,62,0,213,230,1,0,0,0,214,215,
		3,96,48,0,215,216,3,108,54,0,216,217,3,86,43,0,217,218,3,98,49,0,218,230,
		1,0,0,0,219,220,3,108,54,0,220,221,3,102,51,0,221,222,3,122,61,0,222,223,
		3,124,62,0,223,224,3,82,41,0,224,225,3,114,57,0,225,226,3,96,48,0,226,
		227,3,82,41,0,227,228,3,14,7,0,228,230,1,0,0,0,229,202,1,0,0,0,229,209,
		1,0,0,0,229,214,1,0,0,0,229,219,1,0,0,0,230,15,1,0,0,0,231,232,3,22,11,
		0,232,17,1,0,0,0,233,234,3,16,8,0,234,235,3,82,41,0,235,236,5,2,0,0,236,
		237,3,82,41,0,237,238,3,72,36,0,238,239,3,82,41,0,239,240,5,3,0,0,240,
		19,1,0,0,0,241,242,3,86,43,0,242,243,3,92,46,0,243,244,3,92,46,0,244,245,
		3,82,41,0,245,246,3,72,36,0,246,247,3,82,41,0,247,248,3,124,62,0,248,249,
		3,114,57,0,249,250,3,82,41,0,250,251,3,16,8,0,251,269,1,0,0,0,252,253,
		3,86,43,0,253,254,3,92,46,0,254,255,3,92,46,0,255,256,3,82,41,0,256,257,
		3,10,5,0,257,258,3,82,41,0,258,259,3,124,62,0,259,260,3,114,57,0,260,261,
		3,82,41,0,261,262,3,16,8,0,262,263,3,82,41,0,263,264,3,86,43,0,264,265,
		3,124,62,0,265,266,3,82,41,0,266,267,3,72,36,0,267,269,1,0,0,0,268,241,
		1,0,0,0,268,252,1,0,0,0,269,21,1,0,0,0,270,275,3,76,38,0,271,274,3,28,
		14,0,272,274,3,76,38,0,273,271,1,0,0,0,273,272,1,0,0,0,274,277,1,0,0,0,
		275,273,1,0,0,0,275,276,1,0,0,0,276,23,1,0,0,0,277,275,1,0,0,0,278,280,
		5,4,0,0,279,278,1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,281,284,3,26,13,
		0,282,284,5,5,0,0,283,279,1,0,0,0,283,282,1,0,0,0,284,25,1,0,0,0,285,289,
		3,30,15,0,286,288,3,28,14,0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,
		0,0,0,289,290,1,0,0,0,290,27,1,0,0,0,291,289,1,0,0,0,292,295,5,5,0,0,293,
		295,3,30,15,0,294,292,1,0,0,0,294,293,1,0,0,0,295,29,1,0,0,0,296,297,7,
		0,0,0,297,31,1,0,0,0,298,299,3,124,62,0,299,300,3,120,60,0,300,301,3,126,
		63,0,301,302,3,94,47,0,302,310,1,0,0,0,303,304,3,96,48,0,304,305,3,86,
		43,0,305,306,3,108,54,0,306,307,3,122,61,0,307,308,3,94,47,0,308,310,1,
		0,0,0,309,298,1,0,0,0,309,303,1,0,0,0,310,33,1,0,0,0,311,317,5,15,0,0,
		312,316,3,76,38,0,313,316,3,78,39,0,314,316,3,28,14,0,315,312,1,0,0,0,
		315,313,1,0,0,0,315,314,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,
		1,0,0,0,318,320,1,0,0,0,319,317,1,0,0,0,320,321,5,15,0,0,321,35,1,0,0,
		0,322,326,3,76,38,0,323,326,3,80,40,0,324,326,3,28,14,0,325,322,1,0,0,
		0,325,323,1,0,0,0,325,324,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,
		328,1,0,0,0,328,37,1,0,0,0,329,327,1,0,0,0,330,331,3,40,20,0,331,332,3,
		82,41,0,332,337,1,0,0,0,333,334,3,42,21,0,334,335,3,82,41,0,335,337,1,
		0,0,0,336,330,1,0,0,0,336,333,1,0,0,0,337,39,1,0,0,0,338,339,3,120,60,
		0,339,340,3,94,47,0,340,341,3,116,58,0,341,342,3,94,47,0,342,343,3,86,
		43,0,343,344,3,124,62,0,344,345,3,82,41,0,345,346,3,130,65,0,346,347,3,
		100,50,0,347,348,3,102,51,0,348,349,3,108,54,0,349,350,3,94,47,0,350,351,
		3,82,41,0,351,352,3,72,36,0,352,353,3,82,41,0,353,354,3,92,46,0,354,355,
		3,114,57,0,355,356,3,82,41,0,356,357,5,2,0,0,357,358,3,82,41,0,358,359,
		3,6,3,0,359,360,5,3,0,0,360,41,1,0,0,0,361,362,3,120,60,0,362,363,3,126,
		63,0,363,364,3,112,56,0,364,365,3,82,41,0,365,366,3,102,51,0,366,367,3,
		96,48,0,367,368,3,82,41,0,368,369,3,72,36,0,369,370,3,82,41,0,370,371,
		5,2,0,0,371,372,3,82,41,0,372,373,3,6,3,0,373,374,5,3,0,0,374,375,3,82,
		41,0,375,406,1,0,0,0,376,377,3,120,60,0,377,378,3,126,63,0,378,379,3,112,
		56,0,379,380,3,82,41,0,380,381,3,102,51,0,381,382,3,96,48,0,382,383,3,
		82,41,0,383,384,3,72,36,0,384,385,3,82,41,0,385,386,5,2,0,0,386,387,3,
		82,41,0,387,388,3,6,3,0,388,389,5,3,0,0,389,390,3,82,41,0,390,391,3,94,
		47,0,391,392,3,108,54,0,392,393,3,122,61,0,393,394,3,94,47,0,394,395,3,
		82,41,0,395,396,3,120,60,0,396,397,3,126,63,0,397,398,3,112,56,0,398,399,
		3,82,41,0,399,400,5,2,0,0,400,401,3,82,41,0,401,402,3,6,3,0,402,403,5,
		3,0,0,403,404,3,82,41,0,404,406,1,0,0,0,405,361,1,0,0,0,405,376,1,0,0,
		0,406,43,1,0,0,0,407,408,3,90,45,0,408,409,3,120,60,0,409,410,3,94,47,
		0,410,411,3,86,43,0,411,412,3,124,62,0,412,413,3,94,47,0,413,414,3,82,
		41,0,414,415,3,96,48,0,415,416,3,126,63,0,416,417,3,112,56,0,417,418,3,
		90,45,0,418,419,3,124,62,0,419,420,3,102,51,0,420,421,3,114,57,0,421,422,
		3,112,56,0,422,423,3,86,43,0,423,424,3,108,54,0,424,425,3,102,51,0,425,
		426,3,124,62,0,426,427,3,134,67,0,427,428,3,82,41,0,428,429,3,16,8,0,429,
		430,3,82,41,0,430,431,3,50,25,0,431,432,3,82,41,0,432,433,5,2,0,0,433,
		434,3,82,41,0,434,435,3,6,3,0,435,436,5,3,0,0,436,470,1,0,0,0,437,438,
		3,90,45,0,438,439,3,120,60,0,439,440,3,94,47,0,440,441,3,86,43,0,441,442,
		3,124,62,0,442,443,3,94,47,0,443,444,3,82,41,0,444,445,3,96,48,0,445,446,
		3,126,63,0,446,447,3,112,56,0,447,448,3,90,45,0,448,449,3,124,62,0,449,
		450,3,102,51,0,450,451,3,114,57,0,451,452,3,112,56,0,452,453,3,86,43,0,
		453,454,3,108,54,0,454,455,3,102,51,0,455,456,3,124,62,0,456,457,3,134,
		67,0,457,458,3,82,41,0,458,459,3,16,8,0,459,460,3,82,41,0,460,461,3,46,
		23,0,461,462,3,82,41,0,462,463,3,50,25,0,463,464,3,82,41,0,464,465,5,2,
		0,0,465,466,3,82,41,0,466,467,3,6,3,0,467,468,5,3,0,0,468,470,1,0,0,0,
		469,407,1,0,0,0,469,437,1,0,0,0,470,45,1,0,0,0,471,472,3,124,62,0,472,
		473,3,86,43,0,473,474,3,106,53,0,474,475,3,94,47,0,475,476,3,122,61,0,
		476,477,3,82,41,0,477,478,5,2,0,0,478,479,3,82,41,0,479,480,3,48,24,0,
		480,481,3,82,41,0,481,482,5,3,0,0,482,47,1,0,0,0,483,484,3,14,7,0,484,
		485,3,82,41,0,485,486,3,16,8,0,486,487,3,82,41,0,487,488,5,16,0,0,488,
		489,3,82,41,0,489,490,3,48,24,0,490,496,1,0,0,0,491,492,3,14,7,0,492,493,
		3,82,41,0,493,494,3,16,8,0,494,496,1,0,0,0,495,483,1,0,0,0,495,491,1,0,
		0,0,496,49,1,0,0,0,497,498,3,98,49,0,498,499,3,102,51,0,499,500,3,128,
		64,0,500,501,3,94,47,0,501,502,3,122,61,0,502,503,3,82,41,0,503,504,3,
		52,26,0,504,514,1,0,0,0,505,506,3,98,49,0,506,507,3,102,51,0,507,508,3,
		128,64,0,508,509,3,94,47,0,509,510,3,122,61,0,510,511,3,82,41,0,511,512,
		3,14,7,0,512,514,1,0,0,0,513,497,1,0,0,0,513,505,1,0,0,0,514,51,1,0,0,
		0,515,516,3,112,56,0,516,517,3,114,57,0,517,518,3,124,62,0,518,519,3,100,
		50,0,519,520,3,102,51,0,520,521,3,112,56,0,521,522,3,98,49,0,522,53,1,
		0,0,0,523,524,3,58,29,0,524,525,3,82,41,0,525,526,5,17,0,0,526,527,3,82,
		41,0,527,564,1,0,0,0,528,529,3,60,30,0,529,530,3,82,41,0,530,531,5,17,
		0,0,531,532,3,82,41,0,532,564,1,0,0,0,533,534,3,62,31,0,534,535,3,82,41,
		0,535,536,5,17,0,0,536,537,3,82,41,0,537,564,1,0,0,0,538,539,3,64,32,0,
		539,540,3,82,41,0,540,541,5,17,0,0,541,542,3,82,41,0,542,564,1,0,0,0,543,
		544,3,68,34,0,544,545,3,82,41,0,545,546,5,17,0,0,546,547,3,82,41,0,547,
		564,1,0,0,0,548,549,3,70,35,0,549,550,3,82,41,0,550,551,5,17,0,0,551,552,
		3,82,41,0,552,564,1,0,0,0,553,554,3,20,10,0,554,555,3,82,41,0,555,556,
		5,17,0,0,556,557,3,82,41,0,557,564,1,0,0,0,558,559,3,56,28,0,559,560,3,
		82,41,0,560,561,5,17,0,0,561,562,3,82,41,0,562,564,1,0,0,0,563,523,1,0,
		0,0,563,528,1,0,0,0,563,533,1,0,0,0,563,538,1,0,0,0,563,543,1,0,0,0,563,
		548,1,0,0,0,563,553,1,0,0,0,563,558,1,0,0,0,564,55,1,0,0,0,565,566,3,16,
		8,0,566,567,3,82,41,0,567,568,5,18,0,0,568,569,3,82,41,0,569,570,3,72,
		36,0,570,57,1,0,0,0,571,572,3,90,45,0,572,573,3,120,60,0,573,574,3,94,
		47,0,574,575,3,86,43,0,575,576,3,124,62,0,576,577,3,94,47,0,577,578,3,
		82,41,0,578,579,3,14,7,0,579,580,3,82,41,0,580,581,3,16,8,0,581,598,1,
		0,0,0,582,583,3,90,45,0,583,584,3,120,60,0,584,585,3,94,47,0,585,586,3,
		86,43,0,586,587,3,124,62,0,587,588,3,94,47,0,588,589,3,82,41,0,589,590,
		3,14,7,0,590,591,3,82,41,0,591,592,3,16,8,0,592,593,3,82,41,0,593,594,
		5,18,0,0,594,595,3,82,41,0,595,596,3,72,36,0,596,598,1,0,0,0,597,571,1,
		0,0,0,597,582,1,0,0,0,598,59,1,0,0,0,599,600,3,98,49,0,600,601,3,102,51,
		0,601,602,3,128,64,0,602,603,3,94,47,0,603,604,3,82,41,0,604,605,3,64,
		32,0,605,621,1,0,0,0,606,607,3,98,49,0,607,608,3,102,51,0,608,609,3,128,
		64,0,609,610,3,94,47,0,610,611,3,82,41,0,611,612,3,52,26,0,612,621,1,0,
		0,0,613,614,3,98,49,0,614,615,3,102,51,0,615,616,3,128,64,0,616,617,3,
		94,47,0,617,618,3,82,41,0,618,619,3,72,36,0,619,621,1,0,0,0,620,599,1,
		0,0,0,620,606,1,0,0,0,620,613,1,0,0,0,621,61,1,0,0,0,622,623,3,88,44,0,
		623,624,3,120,60,0,624,625,3,94,47,0,625,626,3,86,43,0,626,627,3,106,53,
		0,627,63,1,0,0,0,628,629,3,126,63,0,629,630,3,122,61,0,630,631,3,94,47,
		0,631,632,3,82,41,0,632,638,3,16,8,0,633,634,3,82,41,0,634,635,5,2,0,0,
		635,636,3,82,41,0,636,637,5,3,0,0,637,639,1,0,0,0,638,633,1,0,0,0,638,
		639,1,0,0,0,639,652,1,0,0,0,640,641,3,126,63,0,641,642,3,122,61,0,642,
		643,3,94,47,0,643,644,3,82,41,0,644,645,3,16,8,0,645,646,3,82,41,0,646,
		647,5,2,0,0,647,648,3,66,33,0,648,649,3,82,41,0,649,650,5,3,0,0,650,652,
		1,0,0,0,651,628,1,0,0,0,651,640,1,0,0,0,652,65,1,0,0,0,653,654,3,82,41,
		0,654,655,3,72,36,0,655,656,3,82,41,0,656,657,5,16,0,0,657,658,3,82,41,
		0,658,659,3,66,33,0,659,662,1,0,0,0,660,662,3,72,36,0,661,653,1,0,0,0,
		661,660,1,0,0,0,662,67,1,0,0,0,663,664,3,116,58,0,664,665,3,120,60,0,665,
		666,3,102,51,0,666,667,3,112,56,0,667,668,3,124,62,0,668,669,3,82,41,0,
		669,670,3,124,62,0,670,671,3,114,57,0,671,672,3,82,41,0,672,673,3,122,
		61,0,673,674,3,90,45,0,674,675,3,120,60,0,675,676,3,94,47,0,676,677,3,
		94,47,0,677,678,3,112,56,0,678,679,3,82,41,0,679,680,5,2,0,0,680,681,3,
		82,41,0,681,682,3,72,36,0,682,683,3,82,41,0,683,684,5,3,0,0,684,69,1,0,
		0,0,685,686,3,120,60,0,686,687,3,94,47,0,687,688,3,86,43,0,688,689,3,92,
		46,0,689,690,3,82,41,0,690,691,3,126,63,0,691,692,3,122,61,0,692,693,3,
		94,47,0,693,694,3,120,60,0,694,695,3,82,41,0,695,696,3,102,51,0,696,697,
		3,112,56,0,697,698,3,116,58,0,698,699,3,126,63,0,699,700,3,124,62,0,700,
		705,3,82,41,0,701,702,5,2,0,0,702,703,3,82,41,0,703,704,5,3,0,0,704,706,
		1,0,0,0,705,701,1,0,0,0,705,706,1,0,0,0,706,71,1,0,0,0,707,708,6,36,-1,
		0,708,709,5,2,0,0,709,710,3,72,36,0,710,711,5,3,0,0,711,714,1,0,0,0,712,
		714,3,10,5,0,713,707,1,0,0,0,713,712,1,0,0,0,714,730,1,0,0,0,715,716,10,
		4,0,0,716,717,3,82,41,0,717,718,3,74,37,0,718,719,3,82,41,0,719,720,3,
		72,36,5,720,729,1,0,0,0,721,722,10,1,0,0,722,723,3,82,41,0,723,724,3,86,
		43,0,724,725,3,122,61,0,725,726,3,82,41,0,726,727,3,14,7,0,727,729,1,0,
		0,0,728,715,1,0,0,0,728,721,1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,730,
		731,1,0,0,0,731,73,1,0,0,0,732,730,1,0,0,0,733,757,5,19,0,0,734,757,5,
		4,0,0,735,757,5,20,0,0,736,757,5,21,0,0,737,738,3,110,55,0,738,739,3,114,
		57,0,739,740,3,92,46,0,740,741,3,126,63,0,741,742,3,108,54,0,742,743,3,
		114,57,0,743,757,1,0,0,0,744,757,5,18,0,0,745,757,5,22,0,0,746,757,5,23,
		0,0,747,757,5,24,0,0,748,757,5,25,0,0,749,750,3,86,43,0,750,751,3,112,
		56,0,751,752,3,92,46,0,752,757,1,0,0,0,753,754,3,114,57,0,754,755,3,120,
		60,0,755,757,1,0,0,0,756,733,1,0,0,0,756,734,1,0,0,0,756,735,1,0,0,0,756,
		736,1,0,0,0,756,737,1,0,0,0,756,744,1,0,0,0,756,745,1,0,0,0,756,746,1,
		0,0,0,756,747,1,0,0,0,756,748,1,0,0,0,756,749,1,0,0,0,756,753,1,0,0,0,
		757,75,1,0,0,0,758,759,7,1,0,0,759,77,1,0,0,0,760,764,3,80,40,0,761,764,
		5,78,0,0,762,764,5,79,0,0,763,760,1,0,0,0,763,761,1,0,0,0,763,762,1,0,
		0,0,764,79,1,0,0,0,765,766,7,2,0,0,766,81,1,0,0,0,767,769,7,3,0,0,768,
		767,1,0,0,0,769,772,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,83,1,0,
		0,0,772,770,1,0,0,0,773,774,5,102,0,0,774,775,3,36,18,0,775,776,3,82,41,
		0,776,85,1,0,0,0,777,778,7,4,0,0,778,87,1,0,0,0,779,780,7,5,0,0,780,89,
		1,0,0,0,781,782,7,6,0,0,782,91,1,0,0,0,783,784,7,7,0,0,784,93,1,0,0,0,
		785,786,7,8,0,0,786,95,1,0,0,0,787,788,7,9,0,0,788,97,1,0,0,0,789,790,
		7,10,0,0,790,99,1,0,0,0,791,792,7,11,0,0,792,101,1,0,0,0,793,794,7,12,
		0,0,794,103,1,0,0,0,795,796,7,13,0,0,796,105,1,0,0,0,797,798,7,14,0,0,
		798,107,1,0,0,0,799,800,7,15,0,0,800,109,1,0,0,0,801,802,7,16,0,0,802,
		111,1,0,0,0,803,804,7,17,0,0,804,113,1,0,0,0,805,806,7,18,0,0,806,115,
		1,0,0,0,807,808,7,19,0,0,808,117,1,0,0,0,809,810,7,20,0,0,810,119,1,0,
		0,0,811,812,7,21,0,0,812,121,1,0,0,0,813,814,7,22,0,0,814,123,1,0,0,0,
		815,816,7,23,0,0,816,125,1,0,0,0,817,818,7,24,0,0,818,127,1,0,0,0,819,
		820,7,25,0,0,820,129,1,0,0,0,821,822,7,26,0,0,822,131,1,0,0,0,823,824,
		7,27,0,0,824,133,1,0,0,0,825,826,7,28,0,0,826,135,1,0,0,0,827,828,7,29,
		0,0,828,137,1,0,0,0,36,152,156,163,168,185,229,268,273,275,279,283,289,
		294,309,315,317,325,327,336,405,469,495,513,563,597,620,638,651,661,705,
		713,728,730,756,763,770
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
